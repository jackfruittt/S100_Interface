{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jackr\\\\OneDrive\\\\Documents\\\\CAS Work\\\\S100_Reboot\\\\s100_webui\\\\s100_webui\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FLASK_SERVER_IP = 'http://localhost:5000';\nconst ESP32_IP = 'http://192.168.1.34';\nfunction App() {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [statusMessage, setStatusMessage] = useState(\"\");\n\n  // Function to control the LED via Flask\n  const sendRequest = async endpoint => {\n    setIsLoading(true);\n    setStatusMessage(\"\"); // Clear previous status\n    try {\n      const response = await fetch(`${FLASK_SERVER_IP}/${endpoint}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        setStatusMessage(`Successfully sent request to ${endpoint}`);\n      } else {\n        setStatusMessage(`Failed to send request to ${endpoint}`);\n      }\n    } catch (error) {\n      console.error(`Error sending request to ${endpoint}:`, error);\n      setStatusMessage(`Error: Could not send request to ${endpoint}.`);\n    }\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ESP32 Camera & LED Control\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendRequest(\"on\"),\n        children: \"Turn LED On\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendRequest(\"off\"),\n        children: \"Turn LED Off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: statusMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Live Stream\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `${ESP32_IP}/stream`,\n      alt: \"ESP32 Stream\",\n      style: {\n        marginTop: '20px',\n        border: '2px solid #333',\n        width: '640px',\n        height: '480px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HQ0kG/KWIjKnRgmoqvtEPF4OP/w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FLASK_SERVER_IP","ESP32_IP","App","_s","isLoading","setIsLoading","statusMessage","setStatusMessage","sendRequest","endpoint","response","fetch","method","headers","ok","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","onClick","src","alt","marginTop","border","width","height","_c","$RefreshReg$"],"sources":["C:/Users/jackr/OneDrive/Documents/CAS Work/S100_Reboot/s100_webui/s100_webui/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nconst FLASK_SERVER_IP = 'http://localhost:5000';\r\nconst ESP32_IP = 'http://192.168.1.34';\r\n\r\nfunction App() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [statusMessage, setStatusMessage] = useState(\"\");\r\n\r\n  // Function to control the LED via Flask\r\n  const sendRequest = async (endpoint) => {\r\n    setIsLoading(true);\r\n    setStatusMessage(\"\"); // Clear previous status\r\n    try {\r\n      const response = await fetch(`${FLASK_SERVER_IP}/${endpoint}`, {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n      if (response.ok) {\r\n        setStatusMessage(`Successfully sent request to ${endpoint}`);\r\n      } else {\r\n        setStatusMessage(`Failed to send request to ${endpoint}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error sending request to ${endpoint}:`, error);\r\n      setStatusMessage(`Error: Could not send request to ${endpoint}.`);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>ESP32 Camera & LED Control</h1>\r\n\r\n      <div style={{ marginBottom: '20px' }}>\r\n        <button onClick={() => sendRequest(\"on\")}>Turn LED On</button>\r\n        <button onClick={() => sendRequest(\"off\")}>Turn LED Off</button>\r\n      </div>\r\n\r\n      {isLoading && <p>Loading...</p>}\r\n\r\n      {/* Display the status message */}\r\n      {statusMessage && <p>{statusMessage}</p>}\r\n\r\n      <h2>Live Stream</h2>\r\n      <img\r\n        src={`${ESP32_IP}/stream`}\r\n        alt=\"ESP32 Stream\"\r\n        style={{ marginTop: '20px', border: '2px solid #333', width: '640px', height: '480px' }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}